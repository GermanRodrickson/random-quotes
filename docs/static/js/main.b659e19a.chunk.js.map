{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Quotes","getRandomInt","min","max","Math","floor","random","App","_useState","useState","quotes","Object","slicedToArray","date","Date","quotesByLine","length","split","filter","item","setTimeout","window","location","href","react_default","a","createElement","className","map","quote","i","key","concat","getHours","getMinutes","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8NAGMA,SAAS,CACb,qBACA,8CAFa,kFAKb,SACA,wCACA,iBAPa,qDAUb,qDAVa,2EAab,6CAba,8JAmBb,mDACA,4CApBa,+EAuBb,4BACA,cAxBa,oFA2Bb,wGACA,oCAGIC,EAAe,SAACC,EAAKC,GAAN,OAAcC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IA+BjEK,MA7Bf,WAAe,IAAAC,EACIC,mBAAST,GAAnBU,EADMC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,MAGPK,EAAO,IAAIC,KAEXC,EADgBL,EAAOT,EAAa,EAAGS,EAAOM,OAAS,IAC1BC,MAAM,MAAMC,OAAO,SAACC,GAAD,MAAmB,KAATA,IAMhE,OAJAC,WAAW,WACTC,OAAOC,SAASC,KAAOF,OAAOC,SAASC,MACtC,KAGDC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAClBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACZZ,EAAaa,IAAI,SAACC,EAAOC,GAAR,OAClBN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOI,IAAKD,GACxBD,EACDL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QAAhB,GAAAK,OAA2BnB,EAAKoB,WAAhC,KAAAD,OAA8CnB,EAAKqB,eACnDV,EAAAC,EAAAC,cAAA,8BC5CQS,QACW,cAA7Bd,OAAOC,SAASc,UAEe,UAA7Bf,OAAOC,SAASc,UAEhBf,OAAOC,SAASc,SAASC,MACvB,2DCZNC,IAASC,OAAOf,EAAAC,EAAAC,cAACc,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b659e19a.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\nconst Quotes = [\n  'Microlink festival',\n  'Como vuelvas a decir PHP me salgo del grupo',\n  `Te vuelvo a decir que no se usa así xD \\n\n   Tienes que handlebar el estado`,\n  'Ontas?',\n  'Que va a tener si programa en angular',\n  'Ship ship ship',\n  `No es mobile friendly \\n\n   Y no hay intención`,\n  'Eres más inestable que mi build del dark soulds',\n  `☑️ sacar la web de microlink\n   ☑️ hacer calistenia`,\n  'Me retiro con más descargas que angular',\n  `Acho tira a Valencia a votar \\n\n  Volviendo \\n\n  He metido una pegatina de microlink jajaja \\n\n  No se lo digáis a nadie \\n\n  Marketing de guerrilla`,\n  'Me ponen eso y les hago un rm -rf / de su correo',\n  'No soy un experto pero se ha quedado fino',\n  `venga lo apunto en mi libreta \\n\n  de cosas que me IMPORTAN UNA PUTA MIERDA`,\n  'Estoy jugando con tu jefe',\n  'Full de oro',\n  `Le digo a un pavo que le pago si me ayuda \\n\n  Y me dice que me espere dos meses`,\n  'Es un putísima mierda, un servidor PHP debajo de la cama de Germán funcionaría mejor que eso',\n  'Voy a celebrarlo con un apexito'\n];\n\nconst getRandomInt = (min, max) => Math.floor(Math.random() * (max - min + 1) + min);\n\nfunction App() {\n  const [quotes] = useState(Quotes);\n\n  const date = new Date();\n  const selectedQuote = quotes[getRandomInt(0, quotes.length - 1)]\n  const quotesByLine = selectedQuote.split(\"\\n\").filter((item) => item !== '');\n\n  setTimeout(() => {\n    window.location.href = window.location.href;\n  }, 10000);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      <div className=\"wrapper\">\n        {quotesByLine.map((quote, i) => \n        <div className=\"card\" key={i}>\n          {quote} \n          <div className=\"container\">\n            <span className=\"time\">{`${date.getHours()}:${date.getMinutes()}`}</span>\n            <span>✔</span>\n          </div>\n        </div>)}\n      </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}